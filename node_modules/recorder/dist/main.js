// Generated by CoffeeScript 1.6.2
var Emitter, Recorder, Whammy, blobToUri, saveURL, trigger, wrapper,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Emitter = require('emitter');

trigger = require('trigger-event');

Whammy = require('whammy');

saveURL = function(file, uri) {
  var link;

  link = document.createElement("a");
  link.href = uri;
  link.target = "_blank";
  link.download = file;
  trigger(link, "click");
};

blobToUri = function(blob, cb) {
  var reader;

  reader = new FileReader;
  reader.readAsDataURL(blob);
  return reader.onload = function(event) {
    return cb(event.target.result);
  };
};

Recorder = (function(_super) {
  __extends(Recorder, _super);

  function Recorder(el, fps) {
    this.fps = fps != null ? fps : 32;
    this.clear = __bind(this.clear, this);
    this.toBlob = __bind(this.toBlob, this);
    this.toDataURL = __bind(this.toDataURL, this);
    this.stop = __bind(this.stop, this);
    this.save = __bind(this.save, this);
    this.start = __bind(this.start, this);
    this.grab = __bind(this.grab, this);
    if (el.jquery) {
      this.height = el.height();
      this.width = el.width();
      this.el = el[0];
    } else {
      this.height = el.clientHeight;
      this.width = el.clientWidth;
      this.el = el;
    }
    this.canvas = document.createElement('canvas');
    this.context = this.canvas.getContext('2d');
    this.canvas.height = this.height;
    this.canvas.width = this.width;
    this.interval = 1000 / this.fps;
    this.frames = [];
    this._requested = null;
    this.delta = null;
    this.then = Date.now();
    this.now = null;
  }

  Recorder.prototype.grab = function() {
    var uri;

    this._requested = requestAnimationFrame(this.grab);
    this.now = Date.now();
    this.delta = this.now - this.then;
    if (this.delta > this.interval) {
      this.then = this.now - (this.delta % this.interval);
      this.context.drawImage(this.el, 0, 0, this.width, this.height);
      uri = this.canvas.toDataURL('image/webp', 1);
      this.frames.push(uri);
      this.emit("frame", uri);
    }
    return this;
  };

  Recorder.prototype.start = function() {
    this.grab();
    return this;
  };

  Recorder.prototype.save = function(fileName) {
    if (fileName == null) {
      fileName = "recording.webm";
    }
    this.toDataURL(function(err, uri) {
      return saveURL(fileName, uri);
    });
    return this;
  };

  Recorder.prototype.stop = function() {
    cancelAnimationFrame(this._requested);
    return this;
  };

  Recorder.prototype.toDataURL = function(cb) {
    return this.toBlob(function(err, blob) {
      if (err != null) {
        return cb(err);
      }
      return blobToUri(blob, function(uri) {
        return cb(null, uri);
      });
    });
  };

  Recorder.prototype.toBlob = function(cb) {
    var blob;

    blob = Whammy.fromImageArray(this.frames, this.fps);
    return cb(null, blob);
  };

  Recorder.prototype.clear = function() {
    this.frames = [];
    return this;
  };

  return Recorder;

})(Emitter);

wrapper = function(el) {
  return new Recorder(el);
};

wrapper.Recorder = Recorder;

module.exports = wrapper;
